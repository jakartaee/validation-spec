/*
 * Jakarta Validation API
 *
 * License: Apache License, Version 2.0
 * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
 */

@Library('releng-pipeline') _

// Avoid running the pipeline on branch indexing
if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
	print "INFO: Build skipped due to trigger being Branch Indexing"
	currentBuild.result = 'NOT_BUILT'
	return
}

pipeline {
	agent {
		label 'basic'
	}
	tools {
		maven 'apache-maven-3.9.11'
		jdk 'openjdk-jdk25-latest'
	}
	options {
		buildDiscarder logRotator(daysToKeepStr: '30', numToKeepStr: '10')
		disableConcurrentBuilds(abortPrevious: false)
	}
	parameters {
		string(
				name: 'RELEASE_VERSION',
				defaultValue: '',
				description: 'The version to be released, e.g. 4.0.0.',
				trim: true
		)
		string(
				name: 'DEVELOPMENT_VERSION',
				defaultValue: '',
				description: 'The next version to be used after the release, e.g. 4.0.1-SNAPSHOT.',
				trim: true
		)
		string(
				name: 'RELEASE_VERSION_QUALIFIER',
				defaultValue: '',
				description: 'E.g. Draft/Final/(Early Draft 1).',
				trim: true
		)
		choice(name: 'RELEASE_LICENSE_TO_APPLY', choices: ['evaluation', 'final'], description: 'Select which license should be applied.')
	}
	stages {
		stage('Render the specification documents') {
			when {
				beforeAgent true
				// Releases must be triggered explicitly
				// This is just for safety; normally the Jenkins job for this pipeline
				// should be configured to "Suppress automatic SCM triggering"
				// See https://stackoverflow.com/questions/58259326/prevent-jenkins-multibranch-pipeline-from-triggering-builds-for-new-branches
				triggeredBy cause: "UserIdCause"
			}
			steps {
				script {
					// Check that all the necessary parameters are set
					if (!params.RELEASE_VERSION) {
						throw new IllegalArgumentException("Missing value for parameter RELEASE_VERSION.")
					}
					if (!params.DEVELOPMENT_VERSION) {
						throw new IllegalArgumentException("Missing value for parameter DEVELOPMENT_VERSION.")
					}
					if (!params.RELEASE_VERSION_QUALIFIER) {
						throw new IllegalArgumentException("Missing value for parameter RELEASE_VERSION_QUALIFIER.")
					}
					if (!params.RELEASE_LICENSE_TO_APPLY) {
						throw new IllegalArgumentException("Missing value for parameter RELEASE_LICENSE_TO_APPLY.")
					}

					echo "Performing release for version ${params.RELEASE_VERSION} from ${env.GIT_BRANCH}"

					sshagent(['github-bot-ssh']) {
						withMaven(mavenLocalRepo: env.WORKSPACE_TMP + '/.m2repository') {
							// Set up git so that we can create commits
							sh 'git config --local user.name "eclipse-validation-bot"'
							sh 'git config --local user.email "validation-bot@eclipse.org"'

							// update version:
							sh "./mvnw clean versions:set -DnewVersion=${params.RELEASE_VERSION} -DgenerateBackupPoms=false"

							sh "sed -i 's@<property name=\"bv\\.version\\.spec\" value=\".*\" />@<property name=\"bv.version.spec\" value=\"'${params.RELEASE_VERSION}'\" />@' build.xml"
							sh "sed -i 's@<property name=\"bv\\.version\\.qualifier\" value=\".*\" />@<property name=\"bv.version.qualifier\" value=\"'${params.RELEASE_VERSION_QUALIFIER}'\" />@' build.xml"
							sh "sed -i 's@<property name=\"bv\\.revdate\" value=\".*\" />@<property name=\"bv.revdate\" value=\"'\$(date +%Y-%m-%d)'\" />@' build.xml"
							sh "sed -i 's@<property name=\"license\" value=\".*\" />@<property name=\"license\" value=\"_license-${params.RELEASE_LICENSE_TO_APPLY}\" />@' build.xml"


							// commit and tag the "release version":
							sh "git add build.xml pom.xml"
							sh "git commit -a -m '[Jenkins release job] Preparing release ${params.RELEASE_VERSION}'"
							sh "git tag -a -m 'Release ${params.RELEASE_VERSION}' ${params.RELEASE_VERSION}"

							sh "./mvnw clean install -DskipTests=true -Dlicense=${params.RELEASE_LICENSE_TO_APPLY} -Dbv.version.qualifier=\"${params.RELEASE_VERSION_QUALIFIER}\""

							// create the audit report (required for the TCK before releasing it):
							withAnt(installation: 'apache-ant-latest') {
								sh "ant create-tck-audit-file"
							}

							// reset the version back to dev (NOTE: do not "clean" to keep the rendered artifacts in place):
							sh "./mvnw versions:set -DnewVersion=${params.DEVELOPMENT_VERSION} -DgenerateBackupPoms=false"

							sh "sed -i 's@<property name=\"bv\\.version\\.spec\" value=\".*\" />@<property name=\"bv.version.spec\" value=\"'${params.DEVELOPMENT_VERSION}'\" />@' build.xml"
							sh "sed -i 's@<property name=\"bv\\.version\\.qualifier\" value=\".*\" />@<property name=\"bv.version.qualifier\" value=\"Draft\" />@' build.xml"
							sh "sed -i 's@<property name=\"bv\\.revdate\" value=\".*\" />@<property name=\"bv.revdate\" value=\"\${current.date}\" />@' build.xml"
							sh "sed -i 's@<property name=\"license\" value=\".*\" />@<property name=\"license\" value=\"_license-evaluation\" />@' build.xml"

							// commit the dev version and push all back to git:
							sh "git add build.xml pom.xml"
							sh "git commit -a -m '[Jenkins release job] Preparing next development iteration'"

							sh "git push origin HEAD:${env.GIT_BRANCH}"
							sh "git push origin ${params.RELEASE_VERSION}"
						}
					}
				}
			}
			post {
				success {
					archiveArtifacts artifacts: 'target/dist/**/*',
							fingerprint: true,
							allowEmptyArchive: false
				}
			}
		}
	}
}
