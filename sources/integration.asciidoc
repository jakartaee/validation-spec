// Jakarta Validation
//
// License: Apache License, Version 2.0
// See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.
:validation-api-source-dir: ../target/validation-api/
:spec-examples-source-dir: ../spec-examples/src/test/java/

[[integration]]

== Integration

In this chapter, integration points between {spec-name-bv} and other technologies are discussed. We first address the integration in generic terms applying to all integrations and we then detail how integration with various {spec-name-eeplatform} specifications is handled more specifically.

[[integration-general]]

=== General requirements

This section covers general requirements that should be followed by any container and interception technology integrating {spec-name-bv}.

[[integration-general-objectslifecycle]]
==== Objects lifecycle

Generally speaking, containers and frameworks controlling the lifecycle of objects (such as {spec-name-eeplatform}, dependency injection frameworks or component frameworks) should:

* [tck-testable]#build and bootstrap the [classname]`ValidatorFactory` instance for an application.#
* [tck-testable]#provide access to the [classname]`ValidatorFactory` instance as well as [classname]`Validator` instances in their default configuration using the paradigm of the container: for example, such instances would be injectable in other objects via a dependency injection framework.#
* [tck-testable]#configure [classname]`ValidatorFactory` with a custom [classname]`ConstraintValidatorFactory` instance that returns managed [classname]`ConstraintValidator` instances, unless a custom [classname]`ConstraintValidatorFactory` is requested by the user. The scope of [classname]`ConstraintValidator` instances is still fully controlled by the {spec-name-bv} provider as described in <<constraintsdefinitionimplementation-constraintfactory>>, but as managed beans they can receive expected services like injection of other objects.#
* [tck-testable]#configure [classname]`ValidatorFactory` with managed instances of [classname]`ConstraintValidatorFactory`, [classname]`MessageInterpolator`, [classname]`ParameterNameProvider`, [classname]`ClockProvider` and [classname]`TraversableResolver`, if such instances are defined in the XML deployment descriptor. Services provided by the container (like dependency injection) should thus be available to these instances.#
* [tck-not-testable]#invoke [methodname]`ValidatorFactory.close()` when the [classname]`ValidatorFactory` instance is no longer needed.#
* [tck-not-testable]#dispose of managed instances provided to the {spec-name-bv} bootstrap process after [methodname]`ValidatorFactory.close()` has been invoked.#


[IMPORTANT]
====
In this context, a default [classname]`ValidatorFactory` is a factory configured like the factory returned by [classname]`Validation.buildDefaultValidatorFactory` (see also <<validationapi-bootstrapping-validation>>) except for the enhancements described above. A default [classname]`Validator` instance is a [classname]`Validator` instance retrieved via [methodname]`getValidator()` from the default [classname]`ValidatorFactory`.
====

[[integration-general-executable]]

==== Method and constructor validation

This section expresses the behavior that integration with interception frameworks should follow. Any deviation should be considered with care as it will surprise {spec-name-bv} users.

[tck-testable]#Method interception frameworks (such as AOP or interceptor frameworks) enable interception of constrained methods following the steps defined in <<validationapi-triggeringmethodvalidation>>.# [tck-testable]#Method validation execution is implicit for any method or constructor annotated with constraints.#

[tck-testable]#By default, method validation is applied to all constrained methods or constructors provided the integration technology can intercept the call. By default, getters (as defined in <<constraintdeclarationvalidationprocess-requirements>>) are not considered constrained methods.# [tck-not-testable]#Static methods are ignored by validation. Putting constraints on a static method is not portable.#

{spec-name-bv} - via the interception technology - offers a way to customize whether or not a constructor, method or getter is validated when executed. This is achieved:

* via the [classname]`@ValidateOnExecution` annotation on the executable (see <<example-validateonexecution>>)
* via the [classname]`@ValidateOnExecution` annotation on the type declaring the executable
* via a global configuration defined in [filename]`validation.xml`: `executable-validation` and `default-validated-executable-types`. See <<validationapi-bootstrapping-xmlconfiguration>> for more details.


[NOTE]
====
Integration layers can read the list of validated executable types defined in the global configuration as well as read whether or not executable validation is disabled via the [classname]`Configuration` object: [code]`configuration.getBootstrapConfiguration().getDefaultValidatedExecutableTypes()` and [code]`configuration.getBootstrapConfiguration().isExecutableValidationEnabled()` respectively. This list is extracted from [filename]`validation.xml`.
====

More formally, a given executable (constructor or method) is validated upon execution according to the following rules in decreasing order:

* [tck-testable tck-needs-update]#the executable is validated if it is annotated with [classname]`@ValidateOnExecution` and the [methodname]`type` attribute contains the executable type or `IMPLICIT`. If the [methodname]`type` attribute does neither contain the executable type nor `IMPLICIT`, the executable is not validated.#
* [tck-testable]#otherwise the executable is validated if the type (class, interface) on which it is declared is annotated with [classname]`@ValidateOnExecution` and the [methodname]`type` attribute contains the executable type. If the `type` attribute contains `IMPLICIT`, then this rule is ignored and the behavior is equivalent to [classname]`@ValidateOnExecution` not being present. If the [methodname]`type` attribute does not contain the executable type, the executable is not validated.#
* [tck-testable]#otherwise the executable is validated if the global executable validation setting contains the executable type. If the global setting does not contain the executable type, the executable is not validated.#
* [tck-testable]#The rules above do not apply to methods overriding a superclass method or implementing an interface method. In this case, the method inherits the behavior of the method it overrides / implements. Out of the box, a conforming integration implementation raises a [classname]`ValidationException` if the overriding / implementing method hosts the [classname]`@ValidateOnExecution` annotation.#

The last point is present to enforce the Liskov substitution principle (more info at <<constraintdeclarationvalidationprocess-methodlevelconstraints-inheritance>>). In addition, providers may implement alternative, potentially more liberal, approaches for handling validated methods in inheritance hierarchies. Possible means for activating such alternative behavior include provider-specific configuration properties or annotations. Note that client code relying on such alternative behavior is not portable.

The following executable types are available:

* [tck-testable]#`NONE`: parameters and return values are not validated upon execution. This option is equivalent to an empty list of executable types and is present to improve readability. A list containing `NONE` and other types of executables is equivalent to a list containing the types of executables without `NONE`.#
* [tck-testable]#`CONSTRUCTORS`: parameters and return values are validated provided the executable is a constructor.#
* [tck-testable]#`NON_GETTER_METHODS`: parameters and return values are validated provided the executable is a method but not a getter.#
* [tck-testable]#`GETTER_METHODS`: return values are validated provided the executable is a getter method.#
* [tck-testable]#`ALL`: parameters and return values are validated for all executables (getters, non getters and constructors). This option is equivalent to a list of all executable types and is present to improve readability. A list containing `ALL` and other types of executables is equivalent to a list containing only `ALL`.#
* [tck-testable]#`IMPLICIT`: if [classname]`@ValidateOnExecution` is on a type (class or interface), then it is equivalent to [classname]`@ValidateOnExecution` not being present; if [classname]`@ValidateOnExecution` is on a an executable, the following applies:#
** if on a constructor, it is equivalent to `CONSTRUCTORS`.
** if on a non-getter method, it is equivalent to `NON_GETTER_METHODS`.
** if on a getter, it is equivalent to `GETTER_METHODS`.

[tck-not-testable]#Mixing `IMPLICIT` and other executable types is illegal.#

[[example-validateonexecution]]

[role="api"]
.`@ValidateOnExecution` annotation
====

[source, JAVA]
----
include::{validation-api-source-dir}jakarta/validation/executable/ValidateOnExecution.java[lines=7..8;20..-1]
----

[source, JAVA]
----
include::{validation-api-source-dir}jakarta/validation/executable/ExecutableType.java[lines=7..-1]
----

====

[tck-not-testable]#If a sub type overrides/implements a method originally defined in several parallel types of the hierarchy (e.g. two interfaces not extending each other, or a class and an interface not implemented by said class), [classname]`@ValidateOnExecution` cannot be placed in the parallel types of the hierarchy.# This is to avoid an unexpected altering of the post conditions to be guaranteed to the caller.

[tck-testable]#You can globally disable executable validation by using [code]`<executable-validation enabled="false"/>`, in this case, [code]`<default-validated-executable-types/>` and [classname]`@ValidateOnExecution` are ignored.#

.validation.xml disabling executable validation
====

[source, XML]
----
<?xml version="1.0" encoding="UTF-8"?>
<validation-config
    xmlns="https://jakarta.ee/xml/ns/validation/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        https://jakarta.ee/xml/ns/validation/configuration
        https://jakarta.ee/xml/ns/validation/validation-configuration-3.0.xsd"
    version="3.0">
    <default-provider>com.acme.ACMEProvider</default-provider>
    <message-interpolator>com.acme.ACMEAwareMessageInterpolator</message-interpolator>

    <executable-validation enabled="false"/>

    <constraint-mapping>META-INF/validation/order-constraints.xml</constraint-mapping>
    <constraint-mapping>META-INF/validation/catalog-constraints.xml</constraint-mapping>
    <constraint-mapping>META-INF/validation/customer-constraints.xml</constraint-mapping>

    <property name="com.acme.validation.logging">WARN</property>
    <property name="com.acme.validation.safetyChecking">failOnError</property>

</validation-config>
----

====

[code]`@ValidateOnExecution(type=IMPLICIT)` on a type (class or interface) is useful to mark a class as being involved in executable validation without affecting the behavior. This is used when the integration technology needs a little help to find the classes and interfaces involved.

[NOTE]
====
The proper selection of the validated executables is the responsibility of the integration between the interception technology and {spec-name-bv}. {spec-name-bv} engines ignore the XML configuration around executable validation and [classname]`@ValidateOnExecution` when validating executables and when providing metadata.
====

[[integration-general-executable-examples]]
===== Examples

The following example shows some of the way you can refine executable validation with [classname]`@ValidateOnExecution`.

.Method validation configurations
====


[source, JAVA]
----
//optional: @ValidateOnExecution
public class OrderService {

    boolean isValidCustomer(@NotNull String customerCode) { [...] }

    @ValidateOnExecution
    @Min(0)
    Integer getBacklog() { [...] }

    @ValidateOnExecution(type=NONE)
    Order placeOrder(@NotNull String customerCode, @Valid Item item, int quantity) { [...] }

}

@ValidateOnExecution(type={GETTER_METHODS, NON_GETTER_METHODS})
public class SimpleOrderService extends OrderService {

    public SimpleOrderService(@NotNull ServiceProvider provider) { [...] }

    @Overrides
    Order placeOrder(String customerCode, Item item, int quantity) { [...] }

}

//optional: @ValidateOnExecution
public class ComplexOrderService extends SimpleOrderService {
    public ComplexOrderService(@NotNull ServiceProvider provider) { [...] }
}
----

====

All constructors and non-getter methods of [classname]`OrderService` are validated upon execution as this is the default setting. [methodname]`isValidCustomer()` is validated as this method is not a getter (it has a parameter). [methodname]`getBacklog()` is a getter but is validated thanks to [classname]`@ValidateOnExecution` defaulting to `GETTER_METHODS`. [methodname]`placeOrder()` is not validated as [classname]`@ValidateOnExecution` is set to `NONE`.

All getter and non-getter methods of [classname]`SimpleOrderService` are validated upon execution by default due to the presence of [classname]`@ValidateOnExecution` on the class. The [classname]`SimpleOrderService` constructor is thus not validated. [classname]`SimpleOrderService.placeOrder()` is not validated either because it overrides [classname]`OrderService.placeOrder()` and thus inherits its settings.

All constructors and non-getter methods of [classname]`ComplexOrderService` are validated upon execution as this is the default setting - the type level settings of [classname]`SimpleOrderService` are not inherited. This means that the [classname]`ComplexOrderService` constructor is validated.

[classname]`@ValidateOnExecution` can be optionally set on [classname]`OrderService` and [classname]`ComplexOrderService` without altering the semantic. This marker is necessary for some integration technology in some situations.

[[integration-jakartaee]]

=== {spec-name-eeplatform}

[tck-testable]
--
{spec-name-eeplatform} must obey the rules defined above and make the following instances available under JNDI:

* [classname]`ValidatorFactory` under `java:comp/ValidatorFactory`
* [classname]`Validator` under `java:comp/Validator`
--

[tck-testable]#Instead of looking the instances up via JNDI, the user can request them to be injected via the [classname]`Resource` annotation:#

[source, JAVA]
----
@Resource ValidatorFactory validatorFactory;
@Resource Validator validator;
----

[tck-testable]#When the application is {spec-name-di} enabled, the [classname]`ValidatorFactory` and [classname]`Validator` instances returned by JNDI or [classname]`@Resource` injection are {spec-name-di} enhanced as defined in <<integration-dependencyinjection>>.# In particular, dependency injection is available to {spec-name-bv} components.

[[integration-dependencyinjection]]

=== {spec-name-di} integration

There are several integrations points between {spec-name-bv} and {spec-name-di}. If a {spec-name-bv} provider integrates with {spec-name-di}, it must follow the rules laid out in this section. In a {spec-name-eeplatform} container, a [tck-testable]#{spec-name-bv} provider must integrate with {spec-name-di}.#

[[integration-dependencyinjection-validatorfactory]]
==== [classname]`ValidatorFactory` and [classname]`Validator`

[tck-testable]#Similar to the {spec-name-eeplatform} integration via [classname]`@Resource` (see <<integration-jakartaee>>), a {spec-name-di} container must support injection of built-in default [classname]`ValidatorFactory` and [classname]`Validator` beans via [classname]`@Inject`. These default beans are injectable via the [classname]`@Default` qualifier.#

[source, JAVA]
----
@Inject ValidatorFactory;
@Inject Validator;
----

Optionally, the {spec-name-di} container can support injection of provider specific - as defined by [code]`Validation.byProvider()` - [classname]`ValidatorFactory` and [classname]`Validator` beans via [classname]`@Inject`. These beans must be registered with a custom qualifier, for example [classname]`@ACME`. Using the product name or brand for the qualifier is considered good practice.

[source, JAVA]
----
@Inject @ACME ValidatorFactory;
@Inject @ACME Validator;
----

[NOTE]
.Discussion on possible implementations
====
Registration of the built-in default beans and the provider specific beans may be achieved using the {spec-name-di} portable extension SPI or a vendor specific SPI.
====

[[integration-dependencyinjection-customconfiguration]]
==== [classname]`ConstraintValidatorFactory`, [classname]`MessageInterpolator`, [classname]`ParameterNameProvider`, [classname]`ClockProvider`, [classname]`TraversableResolver` and `ValueExtractor`

[tck-testable]#If custom [classname]`ConstraintValidatorFactory`, [classname]`MessageInterpolator`, [classname]`ParameterNameProvider`, [classname]`ClockProvider`, [classname]`TraversableResolver` or `ValueExtractor` classes are defined in the XML deployment descriptor (see <<validationapi-bootstrapping-xmlconfiguration>>), the [classname]`ValidatorFactory` must be configured with {spec-name-di} managed beans representing the requested classes. Services like dependency injection, interception and decoration must thus be made available to these instances by the container.#
[tck-testable]#The same applies to value extractors discovered through the service loader mechanism (see <<constraintdeclarationvalidationprocess-validationroutine-valueextractorresolution-registering>>).#

[tck-testable]
--
If no custom [classname]`ConstraintValidatorFactory` is requested by the user, the [classname]`ValidatorFactory` must be configured with a custom [classname]`ConstraintValidatorFactory` instance that returns {spec-name-di} managed beans representing the requested [classname]`ConstraintValidator` types. The factory

* creates non-contextual [classname]`ConstraintValidator` instances for each [methodname]`ConstraintValidatorFactory.getInstance()` call. To inject dependencies into the [classname]`ConstraintValidator` instance, the {spec-name-di} [classname]`InjectionTarget` API should be used. Before returning the instance the following calls should be made: [classname]`InjectionTarget.produce()`, [classname]`InjectionTarget.inject()` and [classname]`InjectionTarget.postConstruct()`.
* calls [classname]`InjectionTarget.preDestroy()` and [classname]`InjectionTarget.dispose()` upon [classname]`ConstraintValidatorFactory.releaseInstance` (see also <<constraintsdefinitionimplementation-constraintfactory>> for more information about the lifecycle of a [classname]`ConstraintValidator`).
--

[tck-not-testable]#Using directly or indirectly a {spec-name-persistence} [classname]`EntityManager` that might call back {spec-name-bv} for validation is not allowed in the {spec-name-bv} extension points and in [classname]`ConstraintValidator` instances. This would lead to infinite flush or unexpected behavior.#

[[integration-dependencyinjection-methodconstructorvalidation]]
==== Method and constructor validation

[tck-testable]#{spec-name-bv} requires that {spec-name-di} beans support constructor and method validation as defined in <<integration-general-executable>>. Validation must happen at the equivalent time an interceptor occurs when having priority `Interceptor.Priority.PLATFORM_AFTER+800`, in other words priority of `4800`.#

[tck-not-testable]#For maximum portability, it is recommended to mark {spec-name-di} bean interfaces and classes involved in executable validation with [classname]`@ValidateOnExecution` (defaults to `IMPLICIT`). This helps some implementations to bind the method validation interceptor. Most {spec-name-di} - {spec-name-bv} integration implementations do not need such marker. In particular this marker should not be needed on validated beans annotated with constraint annotations, [classname]`@Valid` or [classname]`@ValidateOnExecution` anywhere in the class. Such limitation will be removed in a future version of this specification.#

[NOTE]
.Discussion on possible implementations
====
The {spec-name-di} interceptor binding facility does not directly support this, but the effect may be achieved using the {spec-name-di} portable extension SPI, or vendor specific SPIs. For example, an interceptor with the expected priority can be programmatically bound to the constructors and methods expected to be validated according to the rules at <<integration-general-executable>>.

It is recommended to only intercept methods and constructors that are both constrained and validated according to the rules defined at <<integration-general-executable>>. <<validationapi-triggeringmethodvalidation>> gives examples how the metadata API can be used to determine whether or not a method is constrained (regardless of the filtering rules of [classname]`@ValidateOnExecution`).
====

==== Java records
Java records are a new language feature introduced in Java 14. They are classes that are designed to be immutable and have a concise syntax for declaring properties and methods. They are unproxyable bean types as per {spec-name-di} since they are final and have no non-private constructor with no parameters.  Because of this, {spec-name-di} beans that are records are not validated by default.  To enable validation of records, one would need to create a producer method that performs the validation, or utilize some bytecode enhancement to intercept the constructor call and perform the validation. There are no requirements for {spec-name-bv} providers to support validation of records automatically in {spec-name-di} environments.

[[integration-dependencyinjection-configuration]]

[[integration-persistence]]
=== {spec-name-persistence} 2.0 integration

Integration with {spec-name-persistence} is described in the link:$$https://projects.eclipse.org/projects/ee4j.jpa$$[{spec-name-persistence} 2 specification]. Persistence frameworks are encouraged to mimic the integration work done with {spec-name-persistence}.

[[integration-faces]]
=== {spec-name-faces} 2.0 integration

Integration with {spec-name-faces} is described in the link:$$https://projects.eclipse.org/projects/ee4j.faces$$[{spec-name-faces} 2 specification]. Presentation frameworks are encouraged to study the integration work done with {spec-name-faces} 2.

[[integration-restfulws]]
=== {spec-name-restfulws} 2 integration

Integration with {spec-name-restfulws} is described in the link:$$https://projects.eclipse.org/projects/ee4j.jaxrs$$[{spec-name-restfulws} 2 specification].
